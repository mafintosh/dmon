#!/bin/bash

. $(which bashkit)

LAUNCHD="silent type launchd"
UPSTART="silent type initctl"
INITD="[ -d /etc/init.d/ ]"

LOGS=$DIRNAME/logs
SCRIPTS=$DIRNAME/scripts

if not opt create --no-boot,-n; then
	UPSTART_CONF="start on (local-filesystems and net-device-up IFACE=eth0)"$'\n'"stop on runlevel [!12345]"
	LAUNCHD_CONF="<key>RunAtLoad</key><true/>"
fi

validate () {
	[ $# = 0 ] && error usage: daemon \<command\> \<daemon\>
}

list-deamons () {
	if   $LAUNCHD; then ls /Library/LaunchDaemons | grep com.dmon | sed 's/com.dmon.//' | sed 's/.plist//'
	elif $UPSTART; then ls /etc/init | grep dmon. | sed 's/dmon.//' | sed 's/.conf//'
	elif $INITD  ; then ls /etc/init.d | grep dmon. | sed 's/dmon.//'
	fi
}

tab-list () {
	: # no completion
}

tab-2 () {
	list-deamons
}

print-help () {
	cat $DIRNAME/help >&2
}

opt create --command,-c, --start,-s, --interactive,-i
sudo-cmd-create () {
	validate $@

	local name=$1
	local script=$2
	local dir=$CWD
	local cmdfile=$SCRIPTS/$name.sh
	local pidfile=$SCRIPTS/$name.pid

	mkdir -p $LOGS
	mkdir -p $SCRIPTS

	[ $# \< 2 ] && not opt --command && not opt --interactive && error usage dmon create $name [\<script\> or --command \<command\>]

	render () {
		local file=$(cat $1)
		shift
		while [ $# != 0 ]; do
			[ "${1:0:2}" != "--" ] && shift && continue
			local name=\{${1//-/}\}
			file="${file//$name/$2}"
			shift; shift
		done
		echo "$file"
	}
	render-with-defaults () {
		render "$@" --cwd "$dir" --name "$name" --script "$cmdfile" --logs "$LOGS" --path "$PATH" --pidfile "$pidfile"
	}

	if opt --command || opt --interactive; then
		echo "$opt_command" > "$cmdfile"
	else
		local base=$(basename $script)
		cd $(dirname $base)
		dir=$PWD
		rm -f $cmdfile
		ln -s "$PWD/$base" $cmdfile
	fi

	[ ! -e "$cmdfile" ] && error file does not exist

	chmod +x $cmdfile

	if   $LAUNCHD; then render-with-defaults $DIRNAME/templates/launchd.xml  --conf "$LAUNCHD_CONF" > /Library/LaunchDaemons/com.dmon.$name.plist
	elif $UPSTART; then render-with-defaults $DIRNAME/templates/upstart.conf --conf "$UPSTART_CONF" > /etc/init/dmon.$name.conf
	elif $INITD  ; then
		render-with-defaults $DIRNAME/templates/initd.sh --conf "$INITD_CONF" > /etc/init.d/dmon.$name
		chmod +x /etc/init.d/dmon.$name
		not opt --no-boot && silent update-rc.d dmon.$name defaults
	else error no daemon provider found
	fi

	opt --interactive && sudo-cmd-edit $name
	opt --start && sudo-cmd-start $name
}

sudo-cmd-remove () {
	validate $@

	silent $FILENAME stop $1

	rm -f $LOGS/$1.{log,log.old}
	rm -f $SCRIPTS/$1.sh

	if   $LAUNCHD; then rm -f /Library/LaunchDaemons/com.dmon.$1.plist
	elif $UPSTART; then rm -f /etc/init/dmon.$1.conf
	elif $INITD  ; then silent update-rc.d dmon.$name remove && rm -f /etc/init.d/dmon.$1
	else error no daemon provider found
	fi
}

opt start --clear,-c --no-log-clean
sudo-cmd-start () {
	validate $@

	! opt --no-log-clean && [ "$(find $LOGS/$1.log -size +25M 2> /dev/null)" != "" ] && (mv $LOGS/$1.{log,log.old}; touch $LOGS/$1.log)
	opt --clear && rm -f $LOGS/$1.{log,.log.old}

	if   $LAUNCHD; then launchctl load -w /Library/LaunchDaemons/com.dmon.$1.plist
	elif $UPSTART; then service dmon.$1 start
	elif $INITD  ; then /etc/init.d/dmon.$1 start
	else error no daemon provider found
	fi
}

sudo-cmd-stop () {
	validate $@

	if   $LAUNCHD; then launchctl unload -w /Library/LaunchDaemons/com.dmon.$1.plist
	elif $UPSTART; then service dmon.$1 stop
	elif $INITD  ; then /etc/init.d/dmon.$1 stop
	else error no daemon provider found
	fi
}

sudo-cmd-edit () {
	validate $@

	${EDITOR:-vi} $SCRIPTS/$1.sh
}

opt restart --clear,-c --no-log-clean
sudo-cmd-restart () {
	validate $@

	opt --clear && rm -f $LOGS/$1.{log,log.old}

	silent $FILENAME stop $1
	$FILENAME start $1 $(opt --no-log-clean && echo --no-log-clean)
}

cmd-describe () {
	validate $@

	cat $SCRIPTS/$1.sh
}

opt list --no-status
sudo-cmd-list () {
	opt --no-status && list-deamons && return $?

	for daemon in $(list-deamons); do
		if   $LAUNCHD; then echo $daemon $(silent launchctl list com.dmon.$daemon && echo running || echo stopped)
		elif $UPSTART; then echo $daemon $(initctl status dmon.$daemon | silent grep running && echo running || echo stopped)
		elif $INITD  ; then echo $daemon $(/etc/init.d/dmon.$daemon status)
		else echo $daemon
		fi
	done
}

opt log --follow,-f
cmd-log () {
	validate $@
	[ ! -e $LOGS/$1.log ] && error no logs available

	if opt --follow; then
		tail -F $LOGS/$1.log
	else
		cat $LOGS/$1.{log,log.old} 2> /dev/null
	fi
}

run